/**
 * TypeScript type definitions for the Task entity.
 * 
 * These interfaces define the shape of task-related data objects used throughout
 * the frontend application, ensuring type safety and consistency with the backend API.
 */

/**
 * Represents a full Task object, as returned by the backend API.
 */
export interface Task {
  /** The unique identifier for the task. */
  id: number;
  /** The title of the task. */
  title: string;
  /** An optional, more detailed description of the task. */
  description?: string;
  /** A boolean flag indicating if the task is completed. */
  completed: boolean;
  /** An optional due date for the task, in ISO string format. */
  due_date?: string;
  /** An optional priority level for the task (e.g., "high", "medium"). */
  priority?: string;
  /** The timestamp when the task was created, in ISO string format. */
  created_at: string;
  /** The timestamp when the task was last updated, in ISO string format. */
  updated_at: string;
}

/**
 * Defines the shape of an object used to create a new task.
 * Does not include fields that are auto-generated by the backend (id, timestamps, etc.).
 */
export interface TaskCreate {
  /** The title for the new task. */
  title: string;
  /** An optional description for the new task. */
  description?: string;
  /** An optional due date for the new task. */
  due_date?: string;
  /** An optional priority for the new task. */
  priority?: string;
}

/**
 * Defines the shape of an object used to update an existing task.
 * All fields are optional to allow for partial updates.
 */
export interface TaskUpdate {
  /** The new title for the task. */
  title?: string;
  /** The new description for the task. */
  description?: string;
  /** The new completion status for the task. */
  completed?: boolean;
  /** The new due date for the task. */
  due_date?: string;
  /** The new priority for the task. */
  priority?: string;
}

/**
 * Defines the shape of the request object for creating a task from natural language.
 */
export interface NaturalLanguageRequest {
  /** The raw text input from the user to be parsed. */
  text: string;
  /** The user's timezone offset in minutes from UTC (optional). */
  timezone?: number;
}